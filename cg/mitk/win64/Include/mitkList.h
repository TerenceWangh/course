/*=========================================================================

  Program:   Medical Imaging Toolkit
  Date:      $Date: 2012-1-6 14:00:00 +0800$
  Version:   $Version: 2.3.3 $
  Copyright: MIPG, Institute of Automation, Chinese Academy of Sciences


=========================================================================*/




#ifndef __mitkList_h
#define __mitkList_h

#include "mitkObject.h"

struct mitkListNode 
{
    mitkObject *Item;
    mitkListNode *Next;
};

/// mitkList - a utility class for a list of mitkObject
///////////////////////////////////////////////////////////////////////////
/// mitkList is a utility class for a list of mitkObject
class MITK_COMMON_API mitkList
{
public:
    mitkList(); 
    virtual ~mitkList();
    void Delete() {delete this;}

    ///////////////////////////////////////////////////////////////////////////
    /// Add an object to the list.
    ///////////////////////////////////////////////////////////////////////////       
    void Add(mitkObject *itemAdding);

    ///////////////////////////////////////////////////////////////////////////
    /// Insert an object to the list.
    ///////////////////////////////////////////////////////////////////////////       
    void Insert(mitkObject *itemInserting, int pos);

    ///////////////////////////////////////////////////////////////////////////
    /// Replace the i'th item
    ///////////////////////////////////////////////////////////////////////////
    void Replace(int i, mitkObject *itemNew);
    
    ///////////////////////////////////////////////////////////////////////////
    /// Remove the i'th item in the list.
    ///////////////////////////////////////////////////////////////////////////
    void Remove(int i);  

    ///////////////////////////////////////////////////////////////////////////
    /// Remove an object from the list.
    ///////////////////////////////////////////////////////////////////////////
    void Remove(mitkObject *itemRemove);

    ///////////////////////////////////////////////////////////////////////////
    /// Remove all objects from the list.
    ///////////////////////////////////////////////////////////////////////////
    void RemoveAll();
    void Clear();

    ///////////////////////////////////////////////////////////////////////////
    /// Search for an object and return location in list. If location == -1,
    /// object was not found.
    ///////////////////////////////////////////////////////////////////////////
    int  Find(mitkObject *itemFinding);

    ///////////////////////////////////////////////////////////////////////////
    /// Get an object in location i
    ///////////////////////////////////////////////////////////////////////////
    mitkObject* GetItem(int i);
    mitkObject* Item(int i);

    ///////////////////////////////////////////////////////////////////////////
    /// Return the number of objects in the list.
    ///////////////////////////////////////////////////////////////////////////
    int  Count()  {return m_Count;}
    int  GetNumberOfItems() {return m_Count;}

    ///////////////////////////////////////////////////////////////////////////
    /// Traversal the list
    ///////////////////////////////////////////////////////////////////////////
    void InitTraversal() {m_Current = m_Top;}
    mitkObject* GetNextItem(void);  

protected:
    int m_Count;
    mitkListNode *m_Top;
    mitkListNode *m_Bottom; 
    mitkListNode *m_Current;    
    

private:
    mitkList(const mitkList&);
    void operator=(const mitkList&);
};


//#define DEFINED_mitkList



#endif

