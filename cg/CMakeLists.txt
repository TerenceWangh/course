cmake_minimum_required(VERSION 2.6)
if(COMMAND CMAKE_POLICY)
  cmake_policy(SET CMP0003 NEW)
endif(COMMAND CMAKE_POLICY)

project(cg_examples)

set(BUILD_ARCH "32")
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(BUILD_ARCH "64")
endif()

# gnu gcc compile flag
if(CMAKE_COMPILER_IS_GNUCXX)
  if(DEBUG)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O0 -fPIC -Wall")
  else(DEBUG)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O3 -fPIC -Wall")
  endif(DEBUG)
  SET(CMAKE_C_LINK_EXECUTABLE   "${CMAKE_C_LINK_EXECUTABLE} -lstdc++ -lX11 -lXxf86vm -lXi")
  SET(CMAKE_CXX_LINK_EXECUTABLE "${CMAKE_CXX_LINK_EXECUTABLE} -lstdc++ -lX11 -lXxf86vm -lXi")
endif(CMAKE_COMPILER_IS_GNUCXX)

set(CMAKE_MODULE_PATH ${cg_examples_SOURCE_DIR}/cmake ${PROJECT_SOURCE_DIR}/external)
set(CMAKE_INSTALL_PREFIX "${cg_examples_BINARY_DIR}/dist" CACHE PATH "cg_examples install prefix" FORCE)

option(USE_SYSTEM_GLUT        "use the system glut libraries"      OFF)
option(USE_SYSTEM_GLEW        "use the system glew libraries"      OFF)
option(USE_SYSTEM_FREE_IMAGE  "use the system FreeImage libraries" OFF)

if(WIN32)
  find_package(WindowsSDK QUIET)
  if(WINDOWSSDK_FOUND)
    message(STATUS "WINDOWSSDK_PREFERRED_DIR = ${WINDOWSSDK_PREFERRED_DIR}")
    message(STATUS "WINDOWSSDK_PREFERRED_FIRST_DIRS = ${WINDOWSSDK_PREFERRED_FIRST_DIRS}")
    get_windowssdk_include_dirs(${WINDOWSSDK_PREFERRED_DIR} WINSDK_INCLUDE_DIRS)
    get_windowssdk_library_dirs(${WINDOWSSDK_PREFERRED_DIR} WINSDK_LIBRARY_DIRS)

    message(STATUS "WINSDK_INCLUDE_DIRS = ${WINSDK_INCLUDE_DIRS}")
    message(STATUS "WINSDK_LIBRARY_DIRS = ${WINSDK_LIBRARY_DIRS}")

    if("${WINSDK_INCLUDE_DIRS}" STREQUAL "NOTFOUND")
      message(STATUS "WINSDK_INCLUDE_DIRS is not found")
    else()
      find_path(freeglut_INCLUDE_DIR  NAMES GL/glut.h             PATHS ${WINSDK_INCLUDE_DIRS})
      find_path(FREEIMAGE_INCLUDE_DIR NAMES FreeImage.h           PATHS ${WINSDK_INCLUDE_DIRS})
      find_path(GLEW_INCLUDE_DIR      NAMES GL/glew.h             PATHS ${WINSDK_INCLUDE_DIRS})

      find_library(freeglut_STATIC_LIBRARIES   NAMES glut glut32 freeglut  PATHS ${WINSDK_LIBRARY_DIRS})
      find_library(glew_STATIC_LIBRARIES       NAMES glew32                PATHS ${WINSDK_LIBRARY_DIRS})
      find_library(freeimage_STATIC_LIBRARIES  NAMES FreeImage             PATHS ${WINSDK_LIBRARY_DIRS})
    endif()
  endif(WINDOWSSDK_FOUND)
endif(WIN32)

# Location where external projects will be downloaded
set(DOWNLOAD_LOCATION "${CMAKE_CURRENT_BINARY_DIR}/downloads"
    CACHE PATH "Location where external projects will be downloaded.")
mark_as_advanced(DOWNLOAD_LOCATION)

set(EXTERNAL_DEPENDICES "")
find_package(OpenGL    REQUIRED)
if(USE_SYSTEM_GLUT)
  find_package(GLUT    REQUIRED)
else()
  include(freeglut)
  set(EXTERNAL_DEPENDICES ${EXTERNAL_DEPENDICES} freeglut)
  install(FILES ${freeglut_LIBRARIES} DESTINATION . CONFIGURATIONS Release)
endif()
if(USE_SYSTEM_GLEW)
  find_package(GLEW    REQUIRED)
else()
  include(glew)
  set(EXTERNAL_DEPENDICES ${EXTERNAL_DEPENDICES} glew)
  install(FILES ${glew_LIBRARIES} DESTINATION . CONFIGURATIONS Release)
endif()
if(USE_SYSTEM_FREE_IMAGE)
  find_package(FreeImage REQUIRED)
else()
  include(freeimage)
  set(EXTERNAL_DEPENDICES ${EXTERNAL_DEPENDICES} freeimage)
  install(FILES ${freeimage_LIBRARIES} DESTINATION . CONFIGURATIONS Release)
endif()
find_package(MITK      QUIET)
install(FILES ${MITK_DLL_LIBRARIES} DESTINATION . CONFIGURATIONS Release)

include_directories(
  "include"
  ${OPENGL_INCLUDE_DIR}
  ${freeglut_INCLUDE_DIR})

add_custom_target(copy_data ${CMAKE_COMMAND} -E copy_directory ${cg_examples_SOURCE_DIR}/data ${cg_examples_BINARY_DIR}/data)

install(DIRECTORY data/ DESTINATION data PATTERN ".svn" EXCLUDE)
install(DIRECTORY src/shaders/ DESTINATION shaders PATTERN ".svn" EXCLUDE)

function(add_example EXAMPLE_NAME)
  set(LIBRARIES ${freeglut_STATIC_LIBRARIES} ${OPENGL_LIBRARIES})
  if(ARGV1)
    set(ADDITIONAL_LIBRARYS ${ARGV})
    list(REMOVE_AT ADDITIONAL_LIBRARYS 0)
    list(APPEND LIBRARIES ${ADDITIONAL_LIBRARYS})
  endif(ARGV1)
  add_executable(${EXAMPLE_NAME} src/${EXAMPLE_NAME}.cpp)
  if("${EXTERNAL_DEPENDICES}" STREQUAL "")
  else()
    add_dependencies(${EXAMPLE_NAME} ${EXTERNAL_DEPENDICES})
  endif()
  target_link_libraries(${EXAMPLE_NAME} ${LIBRARIES})
  install(TARGETS ${EXAMPLE_NAME} RUNTIME DESTINATION . CONFIGURATIONS Release)  
endfunction(add_example)

add_example(sierpinski)
add_example(picksquare)
add_example(transform)
add_example(sphere)
add_example(curves)
add_example(nurbscurve)
add_example(surface)
add_example(gravity)
add_example(gravity2)
add_example(mandelsimp)

include_directories(${freeimage_INCLUDE_DIR})
add_example(texture2d ${freeimage_STATIC_LIBRARIES})
add_dependencies(texture2d copy_data)
add_example(mirror ${freeimage_STATIC_LIBRARIES})
add_dependencies(mirror copy_data)
add_example(planet ${freeimage_STATIC_LIBRARIES})
add_dependencies(planet copy_data)

if(MITK_FOUND)
  include_directories(${MITK_INCLUDE_DIR})
  add_example(spheremap ${MITK_LIBRARIES})
  add_dependencies(spheremap copy_data)
  add_example(dyncubemap ${MITK_LIBRARIES})
  add_dependencies(dyncubemap copy_data)
endif(MITK_FOUND)

include_directories(${glew_INCLUDE_DIRS})
configure_file(src/shaders/phong.vert ${cg_examples_BINARY_DIR}/shaders/phong.vert COPYONLY)
configure_file(src/shaders/phong.frag ${cg_examples_BINARY_DIR}/shaders/phong.frag COPYONLY)
add_example(phongshader ${glew_STATIC_LIBRARIES})
